## An uproar because someone pointed out that the way Rails scaffolds models by default makes apps vulnerable to exploits

Giles Bowkett, [Rails Went Off The Rails](http://gilesbowkett.blogspot.in/2012/02/rails-went-off-rails-why-im-rebuilding.html):

> The sulky, bratty teenage Rails had three big things it made fun of the Java old folks for: design patterns, the JVM's long startup time, and overly ceremonial code which had nothing to do with the day-to-day experience of writing web apps.

To which, I add: The sulky, bratty Rails had a fourth thing it made fun of the Java old folks for: _A culture built around the premise that the most important thing is to preventing developers from making mistakes._

Java has static typing and refactoring tools in the IDE and sealed classes and no monkey-patching, and we endured _years_ of flamewars wherein the Rails people tried to explain to the Java people that trying to prevent good developers from making mistakes was chasing a mirage, and that the most important thing was to educate developers and give them the tools to be awesome, even if they were extremely sharp tools.

And here I am on a Sunday working on memory management in a Node application (Yes, Virginia, applications written in languages that "have memory management baked in" still require thought, care, and sometimes active code to perform memory management). And what do I find online?

An uproar because someone [pointed out](https://github.com/rails/rails/issues/5228) that the way Rails scaffolds models by default makes apps vulnerable to exploits, unless you take care to use a little feature called attr_accessible. The Rails team went with the original Rails perspective on this: Rails developers are required to act like adults and be careful when working with sharp tools.

Well, to be precise, there was zero uproar at first. The uproar came when one of the poster boys for rails applications, Github itself, the source code host for Rails, was pwned by [the very fellow](https://github.com/rails/rails/commit/b83965785db1eec019edf1fc272b1aa393e6dc57#commitcomment-1040908) who complained that Rails is a sharp tool. [Egg on face ensued](http://news.ycombinator.com/item?id=3663197), and now everyone is [arguing](https://gist.github.com/1974187) about how Rails 4 ought to fix this. As if, you know, the fourth most important thing about a tool is to prevent developers from making mistakes.

What else can I say to Giles, except:

**You were right, brother**.

![Vwaltz](images/vwaltz_jpg_scaled500.jpg)

_post scriptum_:

Let's dance with the one we brought to the ball, shall we? I'm all for improving Rails' design. Ignoring "Ignoring this and do nothing," there are two wildly different ways to proceed. First, we can set the priority to make Rails "Safe by default." Second, we can make the priority to make Rails "So clean and elegant that the right thing to do is obvious by default." If we're going to make changes here, I'm in favour of the latter.

Rethink mass assignment outright. Ask hard questions about whether attr_accessible belongs in the model, [in the controller](https://twitter.com/gilesgoatboy/status/176465503538262017), in some kind of view entity, or whether there really ought to be a form do-hickey that helps a view render and also helps a controller process the result. There's a lot of interest in DCI (Data, Context, Interaction). Is attr_accessible a role responsibility?

Come to think of it, why are models so damn fat? What's a form doing only assigning some of a model's attributes? Should it really be posting to a smaller model that is composed into a bigger model?

If we're going to do anything, I'm 100% against trying to take what we have today and somehow putting a safety catch on it. Either rethink it from the ground up, or leave it alone.

[Permalink](http://raganwald.posterous.com/while-giles-is-right-hes-right)
